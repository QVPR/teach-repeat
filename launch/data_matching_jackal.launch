<launch>
	<!-- Global params -->
	<arg name="repeat_num"/>

	<!--rosparam param="data_load_dir">~/robot/teach-repeat-data/2020-09-15_07:00:47</rosparam>
	<rosparam param="data_save_dir" subst_value="True">~/robot/teach-repeat-data/2020-09-15_07:00:47-repeat-$(arg odom_corruption_factor)-$(arg repeat_num)</rosparam-->

	<!--rosparam param="data_load_dir">~/robot/teach-repeat-data/2020-09-17_13:27:47</rosparam>
	<rosparam param="data_save_dir" subst_value="True">~/robot/teach-repeat-data/2020-09-17_13:27:47-repeat-$(arg odom_corruption_factor)-$(arg repeat_num)</rosparam-->

	<!--rosparam param="data_load_dir">~/robot/teach-repeat-data/2020-10-02_15:24:54</rosparam>
	<rosparam param="data_save_dir" subst_value="True">~/robot/teach-repeat-data/2020-10-02_15:24:54-repeat-$(arg odom_corruption_factor)-$(arg repeat_num)</rosparam-->

	<rosparam param="wait_for_ready">false</rosparam>
	<rosparam param="image_resize_width">115</rosparam>
	<rosparam param="image_resize_height">44</rosparam>
	<rosparam param="image_subsampling">1</rosparam>
	<rosparam param="image_field_of_view_width_deg">75</rosparam>
	<rosparam param="patch_size">(9,9)</rosparam>
	<rosparam param="image_recognition_threshold">0.1</rosparam>
	<rosparam param="goal_pose_seperation">0.3</rosparam>
	<rosparam param="lookahead_distance_ratio">1.3</rosparam>
	<rosparam param="turning_target_range_distance_ratio">0.2</rosparam>
	<rosparam param="goal_theta_tolerance">15</rosparam>
	<rosparam param="save_full_res_images">false</rosparam>
	<rosparam param="save_full_res_images_at_goal">true</rosparam>
	<rosparam param="save_gt_data">true</rosparam>
	<rosparam param="publish_gt_goals">false</rosparam>
	<arg name="use_corrupted_odom" default="true"/>
	<arg name="odom_corruption_factor" default="1.0"/>

	<!-- Odom corrupter -->
	<node pkg="teach_repeat" type="odom_corrupter.py" name="odom_corrupter" output="screen" if="$(arg use_corrupted_odom)">
		<remap from="odom" to="odometry/filtered" />
		<rosparam param="translation_error_factor" subst_value="True">$(arg odom_corruption_factor)</rosparam>
		<!--rosparam param="rotation_error_factor" subst_value="True">$(arg odom_corruption_factor)</rosparam-->
		<rosparam param="rotation_error_factor">0.0</rosparam>
	</node>

	<!-- Load image files for matching -->
	<node pkg="teach_repeat" type="image_matcher.py" name="image_matcher" output="screen" >
		<rosparam param="use_old_dataset_format">false</rosparam>
		<rosparam param="use_depth">false</rosparam>
		<rosparam param="use_middle_weighting">false</rosparam>
	</node>

	<!-- Follow the previous poses using odometry, but use images to correct for odometry drift -->
	<node pkg="teach_repeat" type="localiser.py" name="localiser" output="screen" >
		<remap from="odom" to="odometry/filtered" unless="$(arg use_corrupted_odom)" />
		<remap from="odom" to="odom_corrupted" if="$(arg use_corrupted_odom)" />
		<remap from="image" to="ros_indigosdk_occam/image0" />
		<rosparam param="stop_at_end">true</rosparam>
		<rosparam param="discrete-correction">false</rosparam>
		<rosparam param="search-range">3</rosparam>
		<rosparam param="global_localisation_init">true</rosparam>
		<rosparam param="min_init_correlation">0.5</rosparam>
	</node>
	<!-- Republish the goal as a PoseStamped if we need (send to move_base) -->
	<node pkg="topic_tools" type="transform" name="goal_repub" args="/goal goalPose geometry_msgs/PoseStamped m.pose"/>

	<!-- Drive to goal pose -->
	<node pkg="teach_repeat" type="drive_to_pose_controller.py" name="drive_to_pose" output="screen" >
		<!--remap from="odom" to="odometry/filtered" /-->
		<remap from="odom" to="odometry/filtered" unless="$(arg use_corrupted_odom)" />
		<remap from="odom" to="odom_corrupted" if="$(arg use_corrupted_odom)" />
		<rosparam param="min_omega">0.15</rosparam>
		<rosparam param="max_omega">0.93</rosparam>
		<rosparam param="max_v">0.35</rosparam>
	</node>

	<!-- Show image matching -->
	<!--node pkg="image_view" type="image_view" name="image_match_debug_view" >
		<remap from="image" to="match_image_debug" />
	</node-->
</launch>
