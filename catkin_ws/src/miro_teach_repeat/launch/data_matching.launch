<launch>
	<!-- Global params -->
	<rosparam param="data_load_dir">~/miro/data/office5</rosparam>
	<rosparam param="data_save_dir">~/miro/data/office5_tests/28</rosparam>
	<rosparam param="wait_for_ready">true</rosparam>
	<rosparam param="image_resize_width">115</rosparam>
	<rosparam param="image_resize_height">44</rosparam>
	<rosparam param="image_subsampling">1</rosparam>
	<rosparam param="image_field_of_view_width_deg">175.2</rosparam>
	<rosparam param="patch_size">(9,9)</rosparam>
	<rosparam param="image_recognition_threshold">0.1</rosparam>
	<rosparam param="calibration_file_left" subst_value="True">$(find miro_teach_repeat)/calibration/left_360.yaml</rosparam>
	<rosparam param="calibration_file_right" subst_value="True">$(find miro_teach_repeat)/calibration/right_360.yaml</rosparam>
	<rosparam param="goal_pose_seperation">0.2</rosparam>
	<rosparam param="lookahead_distance_ratio">0.65</rosparam>
	<rosparam param="turning_target_range_distance_ratio">0.5</rosparam>
	<rosparam param="goal_theta_tolerance">5</rosparam>
	<rosparam param="save_full_res_images">true</rosparam>
	<rosparam param="save_gt_data">false</rosparam>

	<group ns="miro">
		<!-- Hold head in place, reset odometry and disable cliff sensors -->
		<node pkg="miro_teach_repeat" type="miro_setup.py" name="miro_setup" output="screen">
			<rosparam param="lift">30</rosparam>
			<rosparam param="yaw">0</rosparam>
			<rosparam param="pitch">8</rosparam>
			<rosparam param="reset_odom">false</rosparam>
			<rosparam param="disable_cliff_sensors">true</rosparam>
			<rosparam param="trigger_services">ready_localiser,ready_controller</rosparam>
		</node>

		<!-- Load image files for matching -->
		<node pkg="miro_teach_repeat" type="image_matcher.py" name="image_matcher" output="screen" >
			<rosparam param="use_old_dataset_format">false</rosparam>
			<rosparam param="use_depth">false</rosparam>
			<rosparam param="use_middle_weighting">false</rosparam>
		</node>

		<!-- Stitch image files for matching -->
		<node pkg="miro_teach_repeat" type="image_stitcher.py" name="image_stitcher" output="screen" />

		<!-- Follow the previous poses using odometry, but use images to correct for odometry drift -->
		<node pkg="miro_teach_repeat" type="localiser.py" name="localiser" output="screen" >
			<remap from="odom" to="sensors/odom/integrated" />
			<remap from="image" to="sensors/cam/both" />
			<rosparam param="rotation_correction_gain">0.01</rosparam>
			<rosparam param="path_correction_gain">0.01</rosparam>
			<rosparam param="stop_at_end">true</rosparam>
			<rosparam param="discrete-correction">false</rosparam>
			<rosparam param="search-range">3</rosparam>
			<rosparam param="global_localisation_init">true</rosparam>
		</node>

		<!-- Drive to goal pose -->
		<node pkg="miro_teach_repeat" type="drive_to_pose_controller.py" name="drive_to_pose" output="screen" >
			<remap from="cmd_vel" to="control/cmd_vel_unstamped" />
			<remap from="odom" to="sensors/odom/integrated" />
			<rosparam param="min_omega">2.6</rosparam>
			<rosparam param="max_omega">4.8</rosparam>
			<rosparam param="max_v">0.3</rosparam>
		</node>
		<!-- Convert Twist commands to TwistStamped -->
		<node pkg="miro_teach_repeat" type="twist_stamper.py" name="teleop_stamper">
			<remap from="cmd_vel_unstamped" to="control/cmd_vel_unstamped" />
			<remap from="cmd_vel" to="control/cmd_vel" />
		</node>

		<!-- Show image matching -->
		<node pkg="image_view" type="image_view" name="image_match_debug_view" >
			<remap from="image" to="match_image_debug" />
		</node>
	</group>
</launch>