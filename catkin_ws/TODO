
Testing:
	✔ Test the system driving in a straight line instead of spinning @30m @started(20-03-25 13:41) @done(20-03-25 14:14) @lasted(33m17s)
		Localises better when going in a straight line, but the matching is still a bit dodgy...
		There's a bug with the motor code it seems - the jitters when going straight are coming from commanded motor speeds
	✔ Do a couple of runs and make a confusion matrix to test the raw matching (maybe need normxcorr?) @45m @started(20-03-26 8:14) @done(20-03-26 09:02) @lasted(48m34s)
		Matching looks OK, but the offsets all come out as ~ -60. Should investigate this. Bug fixed!
	✔ Testing while actually driving straight thanks to the new controller @15m @started(20-03-26 10:45) @done(20-03-26 10:58) @lasted(13m25s)
		Again, matching looks OK (not perfect - sometimes it matches crazy images at big offsets...) Controller isn't great though - bad odom drift
	✔ Collect some more datasets to test the image recognition against @done(20-03-26 16:06)
		The wheel locking up seems to exclusively happen on the carpet, and _potentially_ happen more at lower speeds (wheel locking due to low torque?)
		It's weird that the commanded right motor speed is set to zero though -> is this actually something else, like odom?
		Odom on the lino floor also looks a lot better than odom on the carpet
	✔ Test visual odometry for rotation @30m @started(20-03-31 9:50) @done(20-03-31 10:37) @lasted(47m38s)
		Works ok but will need some tuning
		Issues - 
			* want to narrow the field of view so there's less movement at the sides when going straight
			* but narrowing the field of view limits the max tracked turning speed
			* so... need to capture at a higher frame rate for VO
			* want to do better stereo unwarping so the centre of the image looks less crazy

Development:
	Setup:
		✔ Stitch the camera images together @done(20-03-25 10:52)
			✔ Sync the camera images by approximately stamping them @started(20-03-25 09:34) @done(20-03-25 10:27) @lasted(53m10s)
			✔ Use 50% blending for the image stitching @done(20-03-25 10:28)
			✔ Use linear blending @started(20-03-25 10:45) @done(20-03-25 10:52) @lasted(7m16s)
		☐ @WIP Calibrate the cameras to do proper stereo registration
	
	Localisation / Image Processing:
		✔ Assume the robot is at the same place at startup 
		✔ Use a "sliding window" to cull the possible image matches @20m @started(20-03-25 14:33) @done(20-03-25 14:44) @lasted(11m59s)
		✔ Downsample the matching resolution significantly (should lead to more robust performance) @started(20-03-25 10:53) @done(20-03-25 11:16) @lasted(23m22s)
		✔ Using full range of xcorr matching because currently the sides of the image are thrown away (most useful part) @started(20-03-25 15:03) @done(20-03-25 15:07) @lasted(4m49s)
		✔ Implement normxcorr2 @done(20-03-30 18:37)
		☐ Use pose estimates to get rough ground truth data to test image matching
		✔ Use basic scanline matching to determine rotation from images @1h @started(20-03-31 08:22) @done(20-03-31 09:18) @lasted(56m42s)
		☐ Implement a bio-inspired SLAM approach
			☐ Get range / bearing measurements from AR tags
			☐ Record data for offline processing (MATLAB)
			☐ Port to python to run in real-time

	Control:
		✔ Make a basic controller to drive Miro straight @30m @started(20-03-26 10:01) @done(20-03-26 10:40) @lasted(39m28s)
		✔ Use a joystick to teleop Miro for smoother movement @done(20-04-02 12:37)

	ROS:
		☐ @low Make a nicer ordering for starting nodes (wait until camera is set and joints in position)

Bugs: 
	ROS:
		✔ Subscribing to camera before setting camera options results in receiving empty message @20m @started(20-03-25 13:12) @done(20-03-25 13:28) @lasted(16m57s)

	Miro:
		☐ @low When commanding Miro to drive straight, it tends to turn right. `/miro/sensors/wheel_speed_cmd` shows the right wheel speed sometimes set to 0.
			Partly alleviated by using a controller to set the speeds based on integrated odometry - odometry drifts significantly though
		✔ The kinematic joints seem to do some caching, so ingore repeated commands (even as the joints move passively) @30m @started(20-03-25 15:22) @done(20-03-25 15:45) @lasted(23m39s)
		✔ Due to network latency, offboard odom integration is dropping messages, so integration errors occur @1h @started(20-04-06 08:32) @done(20-04-06 09:23) @lasted(51m47s)
		☐ @high The timestamp (of at least odom messages) occasionally overflows - causing big odom integration errors

	Localisation / Image Processing:
		✔ Why do the offsets come out all significantly negative? @15m @started(20-03-26 09:05) @done(20-03-26 09:11) @lasted(6m30s)
